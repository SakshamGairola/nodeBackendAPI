{
	"openapi": "3.0.0",
	"info": {
		"version": "1.0.0",
		"title": "NodeJs Backend API",
		"description": "A minimal and easy CRUD style API in NodeJs using TypeScript",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"paths": {
		"/api/v1/auth/login": {
			"post": {
				"description": "login path",
				"responses": {
					"200": {
						"description": "On success return authentication token"
					}
				},
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"email": {
										"type": "string"
									},
									"password": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/auth/register": {
			"post": {
				"description": "register path",
				"responses": {
					"200": {
						"description": "On success return authentication token"
					}
				},
				"requestBody": {
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"name": {
										"type": "string"
									},
									"username": {
										"type": "string"
									},
									"email": {
										"type": "string"
									},
									"password": {
										"type": "string"
									}
								}
							}
						}
					}
				}
			}
		},
		"/api/v1/publicendpoint/entries": {
			"get": {
				"description": "get all objects that matches with provided parameters or all objects if no parameters are provided",
				"responses": {
					"200": {
						"description": "On success return count and list of entries"
					}
				},
				"parameters": [
					{
						"name": "title",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "https",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "category",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/v1/publicendpoint/random": {
			"get": {
				"description": "get a random objects that matches with provided parameters if provided",
				"responses": {
					"200": {
						"description": "On success return an entries"
					}
				},
				"parameters": [
					{
						"name": "title",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "description",
						"in": "query",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "https",
						"in": "query",
						"schema": {
							"type": "boolean"
						}
					},
					{
						"name": "category",
						"in": "query",
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/v1/publicendpoint/categories": {
			"get": {
				"description": "get count and list of all available categories",
				"responses": {
					"200": {
						"description": "On success returnlist of categories"
					}
				}
			}
		},
		"/api/v1/publicendpoint/healthCheck": {
			"get": {
				"security": [
					{
						"bearerAuth": []
					}
				],
				"description": "route to check if service is live",
				"responses": {
					"200": {
						"description": "{ alive : true }"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Users": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				}
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
